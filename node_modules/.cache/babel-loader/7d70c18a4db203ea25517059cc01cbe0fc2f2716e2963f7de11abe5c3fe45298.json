{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\carear-task-main\\\\carear-task-main\\\\src\\\\Components\\\\charts\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch data from the local JSON file\n        // const response = await fetch('/path/to/your/data.json');\n        // const data = await response.json();\n\n        const handleDateChange = date => {\n          setSelectedDate(date);\n        };\n        const results = mergeData.filter(item => {\n          if (item.hasOwnProperty(\"thermostatPacket\")) {\n            const {\n              product\n            } = item.thermostatPacket.info;\n            if (!date) {\n              // When no date is selected, include all items\n              return product.toLowerCase().includes(term.toLowerCase());\n            } else {\n              // When date is selected, filter by date\n              return product.toLowerCase().includes(term.toLowerCase()) && new Date(item.thermostatPacket.data.timestamp).toDateString() === date.toDateString();\n            }\n          }\n        });\n        setSearchResults(results);\n\n        // Prepare the chart data\n        const categories = data.map(item => item.category);\n        const seriesData = data.map(item => item.value);\n        const chartData = {\n          options: {\n            chart: {\n              id: 'basic-line'\n            },\n            xaxis: {\n              categories: categories\n            }\n          },\n          series: [{\n            name: 'series-1',\n            data: seriesData\n          }]\n        };\n        setChartData(chartData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartData.options,\n      series: chartData.series,\n      type: \"line\",\n      width: 500,\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 1\n  }, this);\n};\n_s(LineChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["useState","useEffect","Chart","jsxDEV","_jsxDEV","LineChart","_s","chartData","setChartData","fetchData","handleDateChange","date","setSelectedDate","results","mergeData","filter","item","hasOwnProperty","product","thermostatPacket","info","toLowerCase","includes","term","Date","data","timestamp","toDateString","setSearchResults","categories","map","category","seriesData","value","options","chart","id","xaxis","series","name","error","console","children","type","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/carear-task-main/carear-task-main/src/Components/charts/index.js"],"sourcesContent":["import { useState,useEffect } from \"react\";\r\nimport Chart from 'react-apexcharts'\r\nconst LineChart = () => {\r\n  const [chartData, setChartData] = useState({});\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch data from the local JSON file\r\n        // const response = await fetch('/path/to/your/data.json');\r\n        // const data = await response.json();\r\n        \r\n\r\n        const handleDateChange = (date) => {\r\n          setSelectedDate(date);\r\n        };\r\n\r\n          const results = mergeData.filter((item) => {\r\n            if (item.hasOwnProperty(\"thermostatPacket\")) {\r\n              const { product } = item.thermostatPacket.info;\r\n      \r\n              if (!date) {\r\n                // When no date is selected, include all items\r\n                return product.toLowerCase().includes(term.toLowerCase());\r\n              } else {\r\n                // When date is selected, filter by date\r\n                return (\r\n                  product.toLowerCase().includes(term.toLowerCase()) &&\r\n                  new Date(item.thermostatPacket.data.timestamp).toDateString() === date.toDateString()\r\n                );\r\n              }\r\n            }\r\n          });\r\n      \r\n          setSearchResults(results);\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n        // Prepare the chart data\r\n        const categories = data.map(item => item.category);\r\n        const seriesData = data.map(item => item.value);\r\n\r\n \r\n\r\n        const chartData = {\r\n          options: {\r\n            chart: {\r\n              id: 'basic-line'\r\n            },\r\n            xaxis: {\r\n              categories: categories\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: 'series-1',\r\n              data: seriesData\r\n            }\r\n          ]\r\n        };\r\n\r\n \r\n\r\n        setChartData(chartData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n \r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n \r\n\r\n  return (\r\n<div>\r\n<Chart options={chartData.options} series={chartData.series} type=\"line\" width={500} height={300} />\r\n</div>\r\n  );\r\n};\r\n\r\n \r\n\r\nexport default LineChart;"],"mappings":";;AAAA,SAASA,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,OAAOC,KAAK,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACpC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAI9CC,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA;QACA;;QAGA,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;UACjCC,eAAe,CAACD,IAAI,CAAC;QACvB,CAAC;QAEC,MAAME,OAAO,GAAGC,SAAS,CAACC,MAAM,CAAEC,IAAI,IAAK;UACzC,IAAIA,IAAI,CAACC,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAC3C,MAAM;cAAEC;YAAQ,CAAC,GAAGF,IAAI,CAACG,gBAAgB,CAACC,IAAI;YAE9C,IAAI,CAACT,IAAI,EAAE;cACT;cACA,OAAOO,OAAO,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACC,IAAI,CAACF,WAAW,CAAC,CAAC,CAAC;YAC3D,CAAC,MAAM;cACL;cACA,OACEH,OAAO,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACC,IAAI,CAACF,WAAW,CAAC,CAAC,CAAC,IAClD,IAAIG,IAAI,CAACR,IAAI,CAACG,gBAAgB,CAACM,IAAI,CAACC,SAAS,CAAC,CAACC,YAAY,CAAC,CAAC,KAAKhB,IAAI,CAACgB,YAAY,CAAC,CAAC;YAEzF;UACF;QACF,CAAC,CAAC;QAEFC,gBAAgB,CAACf,OAAO,CAAC;;QAU3B;QACA,MAAMgB,UAAU,GAAGJ,IAAI,CAACK,GAAG,CAACd,IAAI,IAAIA,IAAI,CAACe,QAAQ,CAAC;QAClD,MAAMC,UAAU,GAAGP,IAAI,CAACK,GAAG,CAACd,IAAI,IAAIA,IAAI,CAACiB,KAAK,CAAC;QAI/C,MAAM1B,SAAS,GAAG;UAChB2B,OAAO,EAAE;YACPC,KAAK,EAAE;cACLC,EAAE,EAAE;YACN,CAAC;YACDC,KAAK,EAAE;cACLR,UAAU,EAAEA;YACd;UACF,CAAC;UACDS,MAAM,EAAE,CACN;YACEC,IAAI,EAAE,UAAU;YAChBd,IAAI,EAAEO;UACR,CAAC;QAEL,CAAC;QAIDxB,YAAY,CAACD,SAAS,CAAC;MACzB,CAAC,CAAC,OAAOiC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAID/B,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAIN,oBACFL,OAAA;IAAAsC,QAAA,eACAtC,OAAA,CAACF,KAAK;MAACgC,OAAO,EAAE3B,SAAS,CAAC2B,OAAQ;MAACI,MAAM,EAAE/B,SAAS,CAAC+B,MAAO;MAACK,IAAI,EAAC,MAAM;MAACC,KAAK,EAAE,GAAI;MAACC,MAAM,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/F,CAAC;AAEN,CAAC;AAAC3C,EAAA,CAvFID,SAAS;AAAA6C,EAAA,GAAT7C,SAAS;AA2Ff,eAAeA,SAAS;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}