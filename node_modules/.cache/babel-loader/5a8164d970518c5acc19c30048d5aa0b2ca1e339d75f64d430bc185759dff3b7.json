{"ast":null,"code":"\"use strict\";\n\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* jslint esnext: true */\nvar round = Math.round;\nfunction daysToYears(days) {\n  // 400 years have 146097 days (taking into account leap year rules)\n  return days * 400 / 146097;\n}\n// Thanks to date-fns\n// https://github.com/date-fns/date-fns\n// MIT © Sasha Koss\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_DAY = 86400000;\nfunction startOfDay(dirtyDate) {\n  var date = new Date(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\nfunction differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;\n  var timestampRight = startOfDayRight.getTime() - startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}\nfunction default_1(from, to) {\n  // Convert to ms timestamps.\n  from = +from;\n  to = +to;\n  var millisecond = round(to - from),\n    second = round(millisecond / 1000),\n    minute = round(second / 60),\n    hour = round(minute / 60);\n  // We expect a more precision in rounding when dealing with\n  // days as it feels wrong when something happended 13 hours ago and\n  // is regarded as \"yesterday\" even if the time was this morning.\n  var day = differenceInCalendarDays(to, from);\n  var week = round(day / 7);\n  var rawYears = daysToYears(day),\n    month = round(rawYears * 12),\n    year = round(rawYears);\n  return {\n    millisecond: millisecond,\n    second: second,\n    'second-short': second,\n    minute: minute,\n    'minute-short': minute,\n    hour: hour,\n    'hour-short': hour,\n    day: day,\n    'day-short': day,\n    week: week,\n    'week-short': week,\n    month: month,\n    'month-short': month,\n    year: year,\n    'year-short': year\n  };\n}\nexports.default = default_1;","map":{"version":3,"names":["round","Math","daysToYears","days","MILLISECONDS_IN_MINUTE","MILLISECONDS_IN_DAY","startOfDay","dirtyDate","date","Date","setHours","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","getTime","getTimezoneOffset","timestampRight","default_1","from","to","millisecond","second","minute","hour","day","week","rawYears","month","year","exports","default"],"sources":["C:\\Users\\madhavi.katika\\Downloads\\carear-task-main\\carear-task-main\\node_modules\\intl-relativeformat\\src\\diff.js"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\nvar round = Math.round;\n\nfunction daysToYears(days) {\n    // 400 years have 146097 days (taking into account leap year rules)\n    return days * 400 / 146097;\n}\n\n// Thanks to date-fns\n// https://github.com/date-fns/date-fns\n// MIT © Sasha Koss\n\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_DAY = 86400000;\n\nfunction startOfDay (dirtyDate) {\n    var date = new Date(dirtyDate);\n    date.setHours(0, 0, 0, 0);\n    return date;\n}\n\nfunction differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {\n    var startOfDayLeft = startOfDay(dirtyDateLeft);\n    var startOfDayRight = startOfDay(dirtyDateRight);\n\n    var timestampLeft = startOfDayLeft.getTime() -\n        startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;\n    var timestampRight = startOfDayRight.getTime() -\n        startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;\n\n    // Round the number of days to the nearest integer\n    // because the number of milliseconds in a day is not constant\n    // (e.g. it's different in the day of the daylight saving time clock shift)\n    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}\n\nexport default function (from, to) {\n    // Convert to ms timestamps.\n    from = +from;\n    to   = +to;\n\n    var millisecond = round(to - from),\n        second      = round(millisecond / 1000),\n        minute      = round(second / 60),\n        hour        = round(minute / 60);\n\n        // We expect a more precision in rounding when dealing with\n        // days as it feels wrong when something happended 13 hours ago and\n        // is regarded as \"yesterday\" even if the time was this morning.\n\n    var day = differenceInCalendarDays(to, from);\n    var week = round(day / 7);\n\n    var rawYears = daysToYears(day),\n        month    = round(rawYears * 12),\n        year     = round(rawYears);\n\n    return {\n        millisecond    : millisecond,\n        second         : second,\n        'second-short' : second,\n        minute         : minute,\n        'minute-short' : minute,\n        hour           : hour,\n        'hour-short'   : hour,\n        day            : day,\n        'day-short'    : day,\n        week           : week,\n        'week-short'   : week,\n        month          : month,\n        'month-short'  : month,\n        year           : year,\n        'year-short'   : year\n    };\n}\n"],"mappings":";;AAAA;;;;;;;;AAMA;AAEA,IAAIA,KAAK,GAAGC,IAAI,CAACD,KAAK;AAEtB,SAASE,WAAWA,CAACC,IAAI;EACrB;EACA,OAAOA,IAAI,GAAG,GAAG,GAAG,MAAM;AAC9B;AAEA;AACA;AACA;AAEA,IAAIC,sBAAsB,GAAG,KAAK;AAClC,IAAIC,mBAAmB,GAAG,QAAQ;AAElC,SAASC,UAAUA,CAAEC,SAAS;EAC1B,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;EAC9BC,IAAI,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzB,OAAOF,IAAI;AACf;AAEA,SAASG,wBAAwBA,CAAEC,aAAa,EAAEC,cAAc;EAC5D,IAAIC,cAAc,GAAGR,UAAU,CAACM,aAAa,CAAC;EAC9C,IAAIG,eAAe,GAAGT,UAAU,CAACO,cAAc,CAAC;EAEhD,IAAIG,aAAa,GAAGF,cAAc,CAACG,OAAO,EAAE,GACxCH,cAAc,CAACI,iBAAiB,EAAE,GAAGd,sBAAsB;EAC/D,IAAIe,cAAc,GAAGJ,eAAe,CAACE,OAAO,EAAE,GAC1CF,eAAe,CAACG,iBAAiB,EAAE,GAAGd,sBAAsB;EAEhE;EACA;EACA;EACA,OAAOH,IAAI,CAACD,KAAK,CAAC,CAACgB,aAAa,GAAGG,cAAc,IAAId,mBAAmB,CAAC;AAC7E;AAEA,SAAAe,UAAyBC,IAAI,EAAEC,EAAE;EAC7B;EACAD,IAAI,GAAG,CAACA,IAAI;EACZC,EAAE,GAAK,CAACA,EAAE;EAEV,IAAIC,WAAW,GAAGvB,KAAK,CAACsB,EAAE,GAAGD,IAAI,CAAC;IAC9BG,MAAM,GAAQxB,KAAK,CAACuB,WAAW,GAAG,IAAI,CAAC;IACvCE,MAAM,GAAQzB,KAAK,CAACwB,MAAM,GAAG,EAAE,CAAC;IAChCE,IAAI,GAAU1B,KAAK,CAACyB,MAAM,GAAG,EAAE,CAAC;EAEhC;EACA;EACA;EAEJ,IAAIE,GAAG,GAAGhB,wBAAwB,CAACW,EAAE,EAAED,IAAI,CAAC;EAC5C,IAAIO,IAAI,GAAG5B,KAAK,CAAC2B,GAAG,GAAG,CAAC,CAAC;EAEzB,IAAIE,QAAQ,GAAG3B,WAAW,CAACyB,GAAG,CAAC;IAC3BG,KAAK,GAAM9B,KAAK,CAAC6B,QAAQ,GAAG,EAAE,CAAC;IAC/BE,IAAI,GAAO/B,KAAK,CAAC6B,QAAQ,CAAC;EAE9B,OAAO;IACHN,WAAW,EAAMA,WAAW;IAC5BC,MAAM,EAAWA,MAAM;IACvB,cAAc,EAAGA,MAAM;IACvBC,MAAM,EAAWA,MAAM;IACvB,cAAc,EAAGA,MAAM;IACvBC,IAAI,EAAaA,IAAI;IACrB,YAAY,EAAKA,IAAI;IACrBC,GAAG,EAAcA,GAAG;IACpB,WAAW,EAAMA,GAAG;IACpBC,IAAI,EAAaA,IAAI;IACrB,YAAY,EAAKA,IAAI;IACrBE,KAAK,EAAYA,KAAK;IACtB,aAAa,EAAIA,KAAK;IACtBC,IAAI,EAAaA,IAAI;IACrB,YAAY,EAAKA;GACpB;AACL;AAtCAC,OAAA,CAAAC,OAAA,GAAAb,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}