{"ast":null,"code":"\"use strict\";\n\nexports[\"default\"] = function () {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n  function peg$subclass(child, parent) {\n    function ctor() {\n      this.constructor = child;\n    }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n  peg$subclass(peg$SyntaxError, Error);\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n      parser = this,\n      peg$FAILED = {},\n      peg$startRuleFunctions = {\n        start: peg$parsestart\n      },\n      peg$startRuleFunction = peg$parsestart,\n      peg$c0 = function (elements) {\n        return {\n          type: 'messageFormatPattern',\n          elements: elements,\n          location: location()\n        };\n      },\n      peg$c1 = function (text) {\n        var string = '',\n          i,\n          j,\n          outerLen,\n          inner,\n          innerLen;\n        for (i = 0, outerLen = text.length; i < outerLen; i += 1) {\n          inner = text[i];\n          for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {\n            string += inner[j];\n          }\n        }\n        return string;\n      },\n      peg$c2 = function (messageText) {\n        return {\n          type: 'messageTextElement',\n          value: messageText,\n          location: location()\n        };\n      },\n      peg$c3 = /^[^ \\t\\n\\r,.+={}#]/,\n      peg$c4 = {\n        type: \"class\",\n        value: \"[^ \\\\t\\\\n\\\\r,.+={}#]\",\n        description: \"[^ \\\\t\\\\n\\\\r,.+={}#]\"\n      },\n      peg$c5 = \"{\",\n      peg$c6 = {\n        type: \"literal\",\n        value: \"{\",\n        description: \"\\\"{\\\"\"\n      },\n      peg$c7 = \",\",\n      peg$c8 = {\n        type: \"literal\",\n        value: \",\",\n        description: \"\\\",\\\"\"\n      },\n      peg$c9 = \"}\",\n      peg$c10 = {\n        type: \"literal\",\n        value: \"}\",\n        description: \"\\\"}\\\"\"\n      },\n      peg$c11 = function (id, format) {\n        return {\n          type: 'argumentElement',\n          id: id,\n          format: format && format[2],\n          location: location()\n        };\n      },\n      peg$c12 = \"number\",\n      peg$c13 = {\n        type: \"literal\",\n        value: \"number\",\n        description: \"\\\"number\\\"\"\n      },\n      peg$c14 = \"date\",\n      peg$c15 = {\n        type: \"literal\",\n        value: \"date\",\n        description: \"\\\"date\\\"\"\n      },\n      peg$c16 = \"time\",\n      peg$c17 = {\n        type: \"literal\",\n        value: \"time\",\n        description: \"\\\"time\\\"\"\n      },\n      peg$c18 = function (type, style) {\n        return {\n          type: type + 'Format',\n          style: style && style[2],\n          location: location()\n        };\n      },\n      peg$c19 = \"plural\",\n      peg$c20 = {\n        type: \"literal\",\n        value: \"plural\",\n        description: \"\\\"plural\\\"\"\n      },\n      peg$c21 = function (pluralStyle) {\n        return {\n          type: pluralStyle.type,\n          ordinal: false,\n          offset: pluralStyle.offset || 0,\n          options: pluralStyle.options,\n          location: location()\n        };\n      },\n      peg$c22 = \"selectordinal\",\n      peg$c23 = {\n        type: \"literal\",\n        value: \"selectordinal\",\n        description: \"\\\"selectordinal\\\"\"\n      },\n      peg$c24 = function (pluralStyle) {\n        return {\n          type: pluralStyle.type,\n          ordinal: true,\n          offset: pluralStyle.offset || 0,\n          options: pluralStyle.options,\n          location: location()\n        };\n      },\n      peg$c25 = \"select\",\n      peg$c26 = {\n        type: \"literal\",\n        value: \"select\",\n        description: \"\\\"select\\\"\"\n      },\n      peg$c27 = function (options) {\n        return {\n          type: 'selectFormat',\n          options: options,\n          location: location()\n        };\n      },\n      peg$c28 = \"=\",\n      peg$c29 = {\n        type: \"literal\",\n        value: \"=\",\n        description: \"\\\"=\\\"\"\n      },\n      peg$c30 = function (selector, pattern) {\n        return {\n          type: 'optionalFormatPattern',\n          selector: selector,\n          value: pattern,\n          location: location()\n        };\n      },\n      peg$c31 = \"offset:\",\n      peg$c32 = {\n        type: \"literal\",\n        value: \"offset:\",\n        description: \"\\\"offset:\\\"\"\n      },\n      peg$c33 = function (number) {\n        return number;\n      },\n      peg$c34 = function (offset, options) {\n        return {\n          type: 'pluralFormat',\n          offset: offset,\n          options: options,\n          location: location()\n        };\n      },\n      peg$c35 = {\n        type: \"other\",\n        description: \"whitespace\"\n      },\n      peg$c36 = /^[ \\t\\n\\r]/,\n      peg$c37 = {\n        type: \"class\",\n        value: \"[ \\\\t\\\\n\\\\r]\",\n        description: \"[ \\\\t\\\\n\\\\r]\"\n      },\n      peg$c38 = {\n        type: \"other\",\n        description: \"optionalWhitespace\"\n      },\n      peg$c39 = /^[0-9]/,\n      peg$c40 = {\n        type: \"class\",\n        value: \"[0-9]\",\n        description: \"[0-9]\"\n      },\n      peg$c41 = /^[0-9a-f]/i,\n      peg$c42 = {\n        type: \"class\",\n        value: \"[0-9a-f]i\",\n        description: \"[0-9a-f]i\"\n      },\n      peg$c43 = \"0\",\n      peg$c44 = {\n        type: \"literal\",\n        value: \"0\",\n        description: \"\\\"0\\\"\"\n      },\n      peg$c45 = /^[1-9]/,\n      peg$c46 = {\n        type: \"class\",\n        value: \"[1-9]\",\n        description: \"[1-9]\"\n      },\n      peg$c47 = function (digits) {\n        return parseInt(digits, 10);\n      },\n      peg$c48 = /^[^{}\\\\\\0-\\x1F \\t\\n\\r]/,\n      peg$c49 = {\n        type: \"class\",\n        value: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\",\n        description: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\"\n      },\n      peg$c50 = \"\\\\\\\\\",\n      peg$c51 = {\n        type: \"literal\",\n        value: \"\\\\\\\\\",\n        description: \"\\\"\\\\\\\\\\\\\\\\\\\"\"\n      },\n      peg$c52 = function () {\n        return '\\\\';\n      },\n      peg$c53 = \"\\\\#\",\n      peg$c54 = {\n        type: \"literal\",\n        value: \"\\\\#\",\n        description: \"\\\"\\\\\\\\#\\\"\"\n      },\n      peg$c55 = function () {\n        return '\\\\#';\n      },\n      peg$c56 = \"\\\\{\",\n      peg$c57 = {\n        type: \"literal\",\n        value: \"\\\\{\",\n        description: \"\\\"\\\\\\\\{\\\"\"\n      },\n      peg$c58 = function () {\n        return '\\u007B';\n      },\n      peg$c59 = \"\\\\}\",\n      peg$c60 = {\n        type: \"literal\",\n        value: \"\\\\}\",\n        description: \"\\\"\\\\\\\\}\\\"\"\n      },\n      peg$c61 = function () {\n        return '\\u007D';\n      },\n      peg$c62 = \"\\\\u\",\n      peg$c63 = {\n        type: \"literal\",\n        value: \"\\\\u\",\n        description: \"\\\"\\\\\\\\u\\\"\"\n      },\n      peg$c64 = function (digits) {\n        return String.fromCharCode(parseInt(digits, 16));\n      },\n      peg$c65 = function (chars) {\n        return chars.join('');\n      },\n      peg$currPos = 0,\n      peg$savedPos = 0,\n      peg$posDetailsCache = [{\n        line: 1,\n        column: 1,\n        seenCR: false\n      }],\n      peg$maxFailPos = 0,\n      peg$maxFailExpected = [],\n      peg$silentFails = 0,\n      peg$result;\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description) {\n      throw peg$buildException(null, [{\n        type: \"other\",\n        description: description\n      }], input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));\n    }\n    function error(message) {\n      throw peg$buildException(message, null, input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));\n    }\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n        p,\n        ch;\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n        while (p < pos) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) {\n              details.line++;\n            }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n          p++;\n        }\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails = peg$computePosDetails(endPos);\n      return {\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) {\n        return;\n      }\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n      peg$maxFailExpected.push(expected);\n    }\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n        expected.sort(function (a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n          }\n          return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function (ch) {\n            return '\\\\x0' + hex(ch);\n          }).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function (ch) {\n            return '\\\\x' + hex(ch);\n          }).replace(/[\\u0100-\\u0FFF]/g, function (ch) {\n            return '\\\\u0' + hex(ch);\n          }).replace(/[\\u1000-\\uFFFF]/g, function (ch) {\n            return '\\\\u' + hex(ch);\n          });\n        }\n        var expectedDescs = new Array(expected.length),\n          expectedDesc,\n          foundDesc,\n          i;\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(\", \") + \" or \" + expectedDescs[expected.length - 1] : expectedDescs[0];\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n      return new peg$SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, location);\n    }\n    function peg$parsestart() {\n      var s0;\n      s0 = peg$parsemessageFormatPattern();\n      return s0;\n    }\n    function peg$parsemessageFormatPattern() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsemessageFormatElement();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsemessageFormatElement();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n      s0 = s1;\n      return s0;\n    }\n    function peg$parsemessageFormatElement() {\n      var s0;\n      s0 = peg$parsemessageTextElement();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseargumentElement();\n      }\n      return s0;\n    }\n    function peg$parsemessageText() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsechars();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsechars();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsews();\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n      return s0;\n    }\n    function peg$parsemessageTextElement() {\n      var s0, s1;\n      s0 = peg$currPos;\n      s1 = peg$parsemessageText();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1);\n      }\n      s0 = s1;\n      return s0;\n    }\n    function peg$parseargument() {\n      var s0, s1, s2;\n      s0 = peg$parsenumber();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c4);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n              }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n      return s0;\n    }\n    function peg$parseargumentElement() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c6);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseargument();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c7;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c8);\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseelementFormat();\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c10);\n                    }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      return s0;\n    }\n    function peg$parseelementFormat() {\n      var s0;\n      s0 = peg$parsesimpleFormat();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepluralFormat();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseselectOrdinalFormat();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectFormat();\n          }\n        }\n      }\n      return s0;\n    }\n    function peg$parsesimpleFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c12) {\n        s1 = peg$c12;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c13);\n        }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c14) {\n          s1 = peg$c14;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c15);\n          }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c17);\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c7;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsechars();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      return s0;\n    }\n    function peg$parsepluralFormat() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c19) {\n        s1 = peg$c19;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c20);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      return s0;\n    }\n    function peg$parseselectOrdinalFormat() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 13) === peg$c22) {\n        s1 = peg$c22;\n        peg$currPos += 13;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c23);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      return s0;\n    }\n    function peg$parseselectFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c26);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseoptionalFormatPattern();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseoptionalFormatPattern();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      return s0;\n    }\n    function peg$parseselector() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c29);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsechars();\n      }\n      return s0;\n    }\n    function peg$parseoptionalFormatPattern() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseselector();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s4 = peg$c5;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c6);\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsemessageFormatPattern();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s8 = peg$c9;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c10);\n                      }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c30(s2, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      return s0;\n    }\n    function peg$parseoffset() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c31) {\n        s1 = peg$c31;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c32);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c33(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      return s0;\n    }\n    function peg$parsepluralStyle() {\n      var s0, s1, s2, s3, s4;\n      s0 = peg$currPos;\n      s1 = peg$parseoffset();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseoptionalFormatPattern();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseoptionalFormatPattern();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c34(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      return s0;\n    }\n    function peg$parsews() {\n      var s0, s1;\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c37);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c36.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c37);\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c35);\n        }\n      }\n      return s0;\n    }\n    function peg$parse_() {\n      var s0, s1, s2;\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsews();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsews();\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c38);\n        }\n      }\n      return s0;\n    }\n    function peg$parsedigit() {\n      var s0;\n      if (peg$c39.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c40);\n        }\n      }\n      return s0;\n    }\n    function peg$parsehexDigit() {\n      var s0;\n      if (peg$c41.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c42);\n        }\n      }\n      return s0;\n    }\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c44);\n        }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c46);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsedigit();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsedigit();\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1);\n      }\n      s0 = s1;\n      return s0;\n    }\n    function peg$parsechar() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c49);\n        }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c50) {\n          s1 = peg$c50;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c51);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c52();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c53) {\n            s1 = peg$c53;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c54);\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c56) {\n              s1 = peg$c56;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c57);\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c59) {\n                s1 = peg$c59;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c60);\n                }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c61();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c62) {\n                  s1 = peg$c62;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c63);\n                  }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$currPos;\n                  s3 = peg$currPos;\n                  s4 = peg$parsehexDigit();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsehexDigit();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsehexDigit();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parsehexDigit();\n                        if (s7 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                  if (s3 !== peg$FAILED) {\n                    s2 = input.substring(s2, peg$currPos);\n                  } else {\n                    s2 = s3;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c64(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n      return s0;\n    }\n    function peg$parsechars() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsechar();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsechar();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1);\n      }\n      s0 = s1;\n      return s0;\n    }\n    peg$result = peg$startRuleFunction();\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({\n          type: \"end\",\n          description: \"end of input\"\n        });\n      }\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n  }\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n}();","map":{"version":3,"names":["peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","peg$parse","input","options","arguments","length","parser","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","elements","type","peg$c1","text","string","i","j","outerLen","inner","innerLen","peg$c2","messageText","value","peg$c3","peg$c4","description","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","id","format","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","style","peg$c19","peg$c20","peg$c21","pluralStyle","ordinal","offset","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","selector","pattern","peg$c31","peg$c32","peg$c33","number","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","digits","parseInt","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","String","fromCharCode","peg$c65","chars","join","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","seenCR","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildException","error","peg$computePosDetails","pos","details","p","ch","charAt","startPos","endPos","startPosDetails","endPosDetails","end","peg$fail","push","cleanupExpected","sort","a","b","splice","buildMessage","stringEscape","s","hex","charCodeAt","toString","toUpperCase","replace","expectedDescs","Array","expectedDesc","foundDesc","slice","s0","peg$parsemessageFormatPattern","s1","s2","peg$parsemessageFormatElement","peg$parsemessageTextElement","peg$parseargumentElement","peg$parsemessageText","s3","s4","s5","peg$parse_","peg$parsechars","peg$parsews","peg$parseargument","peg$parsenumber","test","s6","s7","s8","peg$parseelementFormat","peg$parsesimpleFormat","peg$parsepluralFormat","peg$parseselectOrdinalFormat","peg$parseselectFormat","substr","peg$parsepluralStyle","peg$parseoptionalFormatPattern","peg$parseselector","peg$parseoffset","peg$parsedigit","peg$parsehexDigit","peg$parsechar","SyntaxError","parse"],"sources":["\\src\\parser.js"],"sourcesContent":["export default (function() {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser  = this,\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = function(elements) {\n                return {\n                    type    : 'messageFormatPattern',\n                    elements: elements,\n                    location: location()\n                };\n            },\n        peg$c1 = function(text) {\n                var string = '',\n                    i, j, outerLen, inner, innerLen;\n\n                for (i = 0, outerLen = text.length; i < outerLen; i += 1) {\n                    inner = text[i];\n\n                    for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {\n                        string += inner[j];\n                    }\n                }\n\n                return string;\n            },\n        peg$c2 = function(messageText) {\n                return {\n                    type : 'messageTextElement',\n                    value: messageText,\n                    location: location()\n                };\n            },\n        peg$c3 = /^[^ \\t\\n\\r,.+={}#]/,\n        peg$c4 = { type: \"class\", value: \"[^ \\\\t\\\\n\\\\r,.+={}#]\", description: \"[^ \\\\t\\\\n\\\\r,.+={}#]\" },\n        peg$c5 = \"{\",\n        peg$c6 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n        peg$c7 = \",\",\n        peg$c8 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c9 = \"}\",\n        peg$c10 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n        peg$c11 = function(id, format) {\n                return {\n                    type  : 'argumentElement',\n                    id    : id,\n                    format: format && format[2],\n                    location: location()\n                };\n            },\n        peg$c12 = \"number\",\n        peg$c13 = { type: \"literal\", value: \"number\", description: \"\\\"number\\\"\" },\n        peg$c14 = \"date\",\n        peg$c15 = { type: \"literal\", value: \"date\", description: \"\\\"date\\\"\" },\n        peg$c16 = \"time\",\n        peg$c17 = { type: \"literal\", value: \"time\", description: \"\\\"time\\\"\" },\n        peg$c18 = function(type, style) {\n                return {\n                    type : type + 'Format',\n                    style: style && style[2],\n                    location: location()\n                };\n            },\n        peg$c19 = \"plural\",\n        peg$c20 = { type: \"literal\", value: \"plural\", description: \"\\\"plural\\\"\" },\n        peg$c21 = function(pluralStyle) {\n                return {\n                    type   : pluralStyle.type,\n                    ordinal: false,\n                    offset : pluralStyle.offset || 0,\n                    options: pluralStyle.options,\n                    location: location()\n                };\n            },\n        peg$c22 = \"selectordinal\",\n        peg$c23 = { type: \"literal\", value: \"selectordinal\", description: \"\\\"selectordinal\\\"\" },\n        peg$c24 = function(pluralStyle) {\n                return {\n                    type   : pluralStyle.type,\n                    ordinal: true,\n                    offset : pluralStyle.offset || 0,\n                    options: pluralStyle.options,\n                    location: location()\n                }\n            },\n        peg$c25 = \"select\",\n        peg$c26 = { type: \"literal\", value: \"select\", description: \"\\\"select\\\"\" },\n        peg$c27 = function(options) {\n                return {\n                    type   : 'selectFormat',\n                    options: options,\n                    location: location()\n                };\n            },\n        peg$c28 = \"=\",\n        peg$c29 = { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n        peg$c30 = function(selector, pattern) {\n                return {\n                    type    : 'optionalFormatPattern',\n                    selector: selector,\n                    value   : pattern,\n                    location: location()\n                };\n            },\n        peg$c31 = \"offset:\",\n        peg$c32 = { type: \"literal\", value: \"offset:\", description: \"\\\"offset:\\\"\" },\n        peg$c33 = function(number) {\n                return number;\n            },\n        peg$c34 = function(offset, options) {\n                return {\n                    type   : 'pluralFormat',\n                    offset : offset,\n                    options: options,\n                    location: location()\n                };\n            },\n        peg$c35 = { type: \"other\", description: \"whitespace\" },\n        peg$c36 = /^[ \\t\\n\\r]/,\n        peg$c37 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n        peg$c38 = { type: \"other\", description: \"optionalWhitespace\" },\n        peg$c39 = /^[0-9]/,\n        peg$c40 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c41 = /^[0-9a-f]/i,\n        peg$c42 = { type: \"class\", value: \"[0-9a-f]i\", description: \"[0-9a-f]i\" },\n        peg$c43 = \"0\",\n        peg$c44 = { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n        peg$c45 = /^[1-9]/,\n        peg$c46 = { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n        peg$c47 = function(digits) {\n            return parseInt(digits, 10);\n        },\n        peg$c48 = /^[^{}\\\\\\0-\\x1F \\t\\n\\r]/,\n        peg$c49 = { type: \"class\", value: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\", description: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\" },\n        peg$c50 = \"\\\\\\\\\",\n        peg$c51 = { type: \"literal\", value: \"\\\\\\\\\", description: \"\\\"\\\\\\\\\\\\\\\\\\\"\" },\n        peg$c52 = function() { return '\\\\'; },\n        peg$c53 = \"\\\\#\",\n        peg$c54 = { type: \"literal\", value: \"\\\\#\", description: \"\\\"\\\\\\\\#\\\"\" },\n        peg$c55 = function() { return '\\\\#'; },\n        peg$c56 = \"\\\\{\",\n        peg$c57 = { type: \"literal\", value: \"\\\\{\", description: \"\\\"\\\\\\\\{\\\"\" },\n        peg$c58 = function() { return '\\u007B'; },\n        peg$c59 = \"\\\\}\",\n        peg$c60 = { type: \"literal\", value: \"\\\\}\", description: \"\\\"\\\\\\\\}\\\"\" },\n        peg$c61 = function() { return '\\u007D'; },\n        peg$c62 = \"\\\\u\",\n        peg$c63 = { type: \"literal\", value: \"\\\\u\", description: \"\\\"\\\\\\\\u\\\"\" },\n        peg$c64 = function(digits) {\n                return String.fromCharCode(parseInt(digits, 16));\n            },\n        peg$c65 = function(chars) { return chars.join(''); },\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(\n        message,\n        null,\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p, ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0100-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1000-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsestart() {\n      var s0;\n\n      s0 = peg$parsemessageFormatPattern();\n\n      return s0;\n    }\n\n    function peg$parsemessageFormatPattern() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsemessageFormatElement();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsemessageFormatElement();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsemessageFormatElement() {\n      var s0;\n\n      s0 = peg$parsemessageTextElement();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseargumentElement();\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageText() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsechars();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsechars();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsews();\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageTextElement() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemessageText();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseargument() {\n      var s0, s1, s2;\n\n      s0 = peg$parsenumber();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c4); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseargumentElement() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseargument();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c7;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c8); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseelementFormat();\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseelementFormat() {\n      var s0;\n\n      s0 = peg$parsesimpleFormat();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepluralFormat();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseselectOrdinalFormat();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectFormat();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimpleFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c12) {\n        s1 = peg$c12;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c13); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c14) {\n          s1 = peg$c14;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c7;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsechars();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralFormat() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c19) {\n        s1 = peg$c19;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c20); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectOrdinalFormat() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 13) === peg$c22) {\n        s1 = peg$c22;\n        peg$currPos += 13;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseoptionalFormatPattern();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseoptionalFormatPattern();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselector() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsechars();\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptionalFormatPattern() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseselector();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s4 = peg$c5;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsemessageFormatPattern();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s8 = peg$c9;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c30(s2, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseoffset() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c31) {\n        s1 = peg$c31;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c33(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralStyle() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseoffset();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseoptionalFormatPattern();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseoptionalFormatPattern();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c34(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c36.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c37); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsews();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsews();\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c38); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedigit() {\n      var s0;\n\n      if (peg$c39.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c40); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsehexDigit() {\n      var s0;\n\n      if (peg$c41.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c42); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsedigit();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsedigit();\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsechar() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c50) {\n          s1 = peg$c50;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c51); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c52();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c53) {\n            s1 = peg$c53;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c54); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c56) {\n              s1 = peg$c56;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c59) {\n                s1 = peg$c59;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c60); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c61();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c62) {\n                  s1 = peg$c62;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$currPos;\n                  s3 = peg$currPos;\n                  s4 = peg$parsehexDigit();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsehexDigit();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsehexDigit();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parsehexDigit();\n                        if (s7 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                  if (s3 !== peg$FAILED) {\n                    s2 = input.substring(s2, peg$currPos);\n                  } else {\n                    s2 = s3;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c64(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsechars() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsechar();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsechar();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(\n        null,\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}