{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar RelativeTimeFormat;\n// -- Utilities ----------------------------------------------------------------\nfunction getCacheId(inputs) {\n  return JSON.stringify(inputs.map(function (input) {\n    return input && typeof input === 'object' ? orderedProps(input) : input;\n  }));\n}\nfunction orderedProps(obj) {\n  return Object.keys(obj).sort().map(function (k) {\n    var _a;\n    return _a = {}, _a[k] = obj[k], _a;\n  });\n}\nvar memoizeFormatConstructor = function (FormatConstructor, cache) {\n  if (cache === void 0) {\n    cache = {};\n  }\n  return function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var cacheId = getCacheId(args);\n    var format = cacheId && cache[cacheId];\n    if (!format) {\n      format = new ((_a = FormatConstructor).bind.apply(_a, [void 0].concat(args)))();\n      if (cacheId) {\n        cache[cacheId] = format;\n      }\n    }\n    return format;\n  };\n};\nexport default memoizeFormatConstructor;","map":{"version":3,"names":["RelativeTimeFormat","getCacheId","inputs","JSON","stringify","map","input","orderedProps","obj","Object","keys","sort","k","_a","memoizeFormatConstructor","FormatConstructor","cache","args","_i","arguments","length","cacheId","format","bind","apply","concat"],"sources":["C:\\Users\\madhavi.katika\\Downloads\\carear-task-main\\carear-task-main\\node_modules\\intl-format-cache\\src\\index.ts"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n// -----------------------------------------------------------------------------\n\n// TODO: Remove this once Intl.RelativeTimeFormat is no longer a draft\ninterface RelativeTimeFormat {\n  format(value: number, unit: string): string;\n  formatToParts(value: number, unit: string): { value: string }[];\n  resolvedOptions(): ResolvedRelativeTimeFormatOptions;\n}\ninterface ResolvedRelativeTimeFormatOptions\n  extends Pick<RelativeTimeFormatOptions, 'numeric' | 'style'> {\n  locale: string;\n}\ninterface RelativeTimeFormatOptions {\n  localeMatcher: 'best fit' | 'lookup';\n  numeric: 'always' | 'auto';\n  style: 'long' | 'short' | 'narrow';\n}\nlet RelativeTimeFormat: {\n  new (\n    locales?: string | string[],\n    opts?: RelativeTimeFormatOptions\n  ): RelativeTimeFormat;\n  (\n    locales?: string | string[],\n    opts?: RelativeTimeFormatOptions\n  ): RelativeTimeFormat;\n  supportedLocalesOf(\n    locales: string | string[],\n    opts?: Pick<RelativeTimeFormatOptions, 'localeMatcher'>\n  ): string[];\n};\n\n// -- Utilities ----------------------------------------------------------------\n\nfunction getCacheId(inputs: any[]) {\n  return JSON.stringify(\n    inputs.map(input =>\n      input && typeof input === 'object' ? orderedProps(input) : input\n    )\n  );\n}\n\nfunction orderedProps(obj: Record<string, any>) {\n  return Object.keys(obj)\n    .sort()\n    .map(k => ({ [k]: obj[k] }));\n}\n\ninterface MemoizeFormatConstructorFn {\n  (constructor: typeof Intl.NumberFormat): (\n    ...args: ConstructorParameters<typeof Intl.NumberFormat>\n  ) => Intl.NumberFormat;\n  (constructor: typeof Intl.DateTimeFormat): (\n    ...args: ConstructorParameters<typeof Intl.DateTimeFormat>\n  ) => Intl.DateTimeFormat;\n  (constructor: typeof RelativeTimeFormat): (\n    ...args: ConstructorParameters<typeof RelativeTimeFormat>\n  ) => RelativeTimeFormat;\n  (constructor: any): (...args: any[]) => any;\n}\n\nconst memoizeFormatConstructor: MemoizeFormatConstructorFn = (\n  FormatConstructor: any,\n  cache: Record<string, any> = {}\n) => (...args: any[]) => {\n  const cacheId = getCacheId(args);\n  let format = cacheId && cache[cacheId];\n  if (!format) {\n    format = new (FormatConstructor as any)(...args);\n    if (cacheId) {\n      cache[cacheId] = format;\n    }\n  }\n\n  return format;\n};\n\nexport default memoizeFormatConstructor;\n"],"mappings":"AAAA;;;;;AAuBA,IAAIA,kBAaH;AAED;AAEA,SAASC,UAAUA,CAACC,MAAa;EAC/B,OAAOC,IAAI,CAACC,SAAS,CACnBF,MAAM,CAACG,GAAG,CAAC,UAAAC,KAAK;IACd,OAAAA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,GAAGC,YAAY,CAACD,KAAK,CAAC,GAAGA,KAAK;EAAhE,CAAgE,CACjE,CACF;AACH;AAEA,SAASC,YAAYA,CAACC,GAAwB;EAC5C,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CACpBG,IAAI,EAAE,CACNN,GAAG,CAAC,UAAAO,CAAC;;IAAI,OAAAC,EAAA,OAAGA,EAAA,CAACD,CAAC,IAAGJ,GAAG,CAACI,CAAC,CAAC,EAAAC,EAAA;EAAd,CAAiB,CAAC;AAChC;AAeA,IAAMC,wBAAwB,GAA+B,SAAAA,CAC3DC,iBAAsB,EACtBC,KAA+B;EAA/B,IAAAA,KAAA;IAAAA,KAAA,KAA+B;EAAA;EAC5B;;IAAC,IAAAC,IAAA;SAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;MAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACJ,IAAMG,OAAO,GAAGpB,UAAU,CAACgB,IAAI,CAAC;IAChC,IAAIK,MAAM,GAAGD,OAAO,IAAIL,KAAK,CAACK,OAAO,CAAC;IACtC,IAAI,CAACC,MAAM,EAAE;MACXA,MAAM,QAAO,CAAAT,EAAA,GAACE,iBAAyB,EAAAQ,IAAA,CAAAC,KAAA,CAAAX,EAAA,WAAAY,MAAA,CAAIR,IAAI,KAAC;MAChD,IAAII,OAAO,EAAE;QACXL,KAAK,CAACK,OAAO,CAAC,GAAGC,MAAM;;;IAI3B,OAAOA,MAAM;EACf,CAAC;AAXI,CAWJ;AAED,eAAeR,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}