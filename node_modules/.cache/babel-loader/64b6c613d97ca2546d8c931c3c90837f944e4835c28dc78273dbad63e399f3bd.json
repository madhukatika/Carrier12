{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\carear-task-main\\\\carear-task-main\\\\src\\\\Components\\\\charts\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ApexCharts from 'apexcharts';\nimport ReactApexChart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('../json_data/');\n        const data = await response.json();\n\n        // Process the JSON data to extract x and y values\n        const seriesData = data.map(item => ({\n          x: new Date(item.thermostatPacket.data.timestamp),\n          y: item.thermostatPacket.data.indoorTemperature10xF / 10 // Divide by 10 to convert to actual temperature\n        }));\n\n        // Sort the seriesData based on x values (timestamps)\n        seriesData.sort((a, b) => a.x - b.x);\n        setChartData({\n          series: [{\n            data: seriesData\n          }],\n          options: {\n            chart: {\n              type: 'line'\n            },\n            xaxis: {\n              type: 'datetime'\n            }\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: chartData.series ? /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      series: chartData.series,\n      options: chartData.options,\n      type: \"line\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartComponent, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useState","useEffect","ApexCharts","ReactApexChart","jsxDEV","_jsxDEV","ChartComponent","_s","chartData","setChartData","fetchData","response","fetch","data","json","seriesData","map","item","x","Date","thermostatPacket","timestamp","y","indoorTemperature10xF","sort","a","b","series","options","chart","type","xaxis","error","console","children","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/carear-task-main/carear-task-main/src/Components/charts/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ApexCharts from 'apexcharts';\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\nconst ChartComponent = () => {\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('../json_data/');\r\n        const data = await response.json();\r\n\r\n        // Process the JSON data to extract x and y values\r\n        const seriesData = data.map(item => ({\r\n          x: new Date(item.thermostatPacket.data.timestamp),\r\n          y: item.thermostatPacket.data.indoorTemperature10xF / 10 // Divide by 10 to convert to actual temperature\r\n        }));\r\n\r\n        // Sort the seriesData based on x values (timestamps)\r\n        seriesData.sort((a, b) => a.x - b.x);\r\n\r\n        setChartData({\r\n          series: [\r\n            {\r\n              data: seriesData\r\n            }\r\n          ],\r\n          options: {\r\n            chart: {\r\n              type: 'line'\r\n            },\r\n            xaxis: {\r\n              type: 'datetime'\r\n            }\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {chartData.series ? (\r\n        <ReactApexChart\r\n          series={chartData.series}\r\n          options={chartData.options}\r\n          type=\"line\"\r\n          height={350}\r\n        />\r\n      ) : (\r\n        <div>Loading chart...</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,CAAC;QAC7C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,UAAU,GAAGF,IAAI,CAACG,GAAG,CAACC,IAAI,KAAK;UACnCC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,gBAAgB,CAACP,IAAI,CAACQ,SAAS,CAAC;UACjDC,CAAC,EAAEL,IAAI,CAACG,gBAAgB,CAACP,IAAI,CAACU,qBAAqB,GAAG,EAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;;QAEH;QACAR,UAAU,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACP,CAAC,GAAGQ,CAAC,CAACR,CAAC,CAAC;QAEpCT,YAAY,CAAC;UACXkB,MAAM,EAAE,CACN;YACEd,IAAI,EAAEE;UACR,CAAC,CACF;UACDa,OAAO,EAAE;YACPC,KAAK,EAAE;cACLC,IAAI,EAAE;YACR,CAAC;YACDC,KAAK,EAAE;cACLD,IAAI,EAAE;YACR;UACF;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDtB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAA6B,QAAA,EACG1B,SAAS,CAACmB,MAAM,gBACftB,OAAA,CAACF,cAAc;MACbwB,MAAM,EAAEnB,SAAS,CAACmB,MAAO;MACzBC,OAAO,EAAEpB,SAAS,CAACoB,OAAQ;MAC3BE,IAAI,EAAC,MAAM;MACXK,MAAM,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,gBAEFlC,OAAA;MAAA6B,QAAA,EAAK;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAC3B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChC,EAAA,CAvDID,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AAyDpB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}