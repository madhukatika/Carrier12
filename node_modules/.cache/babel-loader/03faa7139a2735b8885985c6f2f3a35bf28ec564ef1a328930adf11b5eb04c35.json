{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\n\nvar src$utils$$ = require(\"./utils\"),\n  src$es5$$ = require(\"./es5\"),\n  src$compiler$$ = require(\"./compiler\"),\n  intl$messageformat$parser$$ = require(\"intl-messageformat-parser\");\nexports[\"default\"] = MessageFormat;\n\n// -- MessageFormat --------------------------------------------------------\n\nfunction MessageFormat(message, locales, formats) {\n  // Parse string messages into an AST.\n  var ast = typeof message === 'string' ? MessageFormat.__parse(message) : message;\n  if (!(ast && ast.type === 'messageFormatPattern')) {\n    throw new TypeError('A message must be provided as a String or AST.');\n  }\n\n  // Creates a new object with the specified `formats` merged with the default\n  // formats.\n  formats = this._mergeFormats(MessageFormat.formats, formats);\n\n  // Defined first because it's used to build the format pattern.\n  src$es5$$.defineProperty(this, '_locale', {\n    value: this._resolveLocale(locales)\n  });\n\n  // Compile the `ast` to a pattern that is highly optimized for repeated\n  // `format()` invocations. **Note:** This passes the `locales` set provided\n  // to the constructor instead of just the resolved locale.\n  var pluralFn = this._findPluralRuleFunction(this._locale);\n  var pattern = this._compilePattern(ast, locales, formats, pluralFn);\n\n  // \"Bind\" `format()` method to `this` so it can be passed by reference like\n  // the other `Intl` APIs.\n  var messageFormat = this;\n  this.format = function (values) {\n    try {\n      return messageFormat._format(pattern, values);\n    } catch (e) {\n      if (e.variableId) {\n        throw new Error('The intl string context variable \\'' + e.variableId + '\\'' + ' was not provided to the string \\'' + message + '\\'');\n      } else {\n        throw e;\n      }\n    }\n  };\n}\n\n// Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\nsrc$es5$$.defineProperty(MessageFormat, 'formats', {\n  enumerable: true,\n  value: {\n    number: {\n      'currency': {\n        style: 'currency'\n      },\n      'percent': {\n        style: 'percent'\n      }\n    },\n    date: {\n      'short': {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      'medium': {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      'long': {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      'full': {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      'short': {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      'medium': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      'long': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      'full': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  }\n});\n\n// Define internal private properties for dealing with locale data.\nsrc$es5$$.defineProperty(MessageFormat, '__localeData__', {\n  value: src$es5$$.objCreate(null)\n});\nsrc$es5$$.defineProperty(MessageFormat, '__addLocaleData', {\n  value: function (data) {\n    if (!(data && data.locale)) {\n      throw new Error('Locale data provided to IntlMessageFormat is missing a ' + '`locale` property');\n    }\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n  }\n});\n\n// Defines `__parse()` static method as an exposed private.\nsrc$es5$$.defineProperty(MessageFormat, '__parse', {\n  value: intl$messageformat$parser$$[\"default\"].parse\n});\n\n// Define public `defaultLocale` property which defaults to English, but can be\n// set by the developer.\nsrc$es5$$.defineProperty(MessageFormat, 'defaultLocale', {\n  enumerable: true,\n  writable: true,\n  value: undefined\n});\nMessageFormat.prototype.resolvedOptions = function () {\n  // TODO: Provide anything else?\n  return {\n    locale: this._locale\n  };\n};\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\n  var compiler = new src$compiler$$[\"default\"](locales, formats, pluralFn);\n  return compiler.compile(ast);\n};\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\n  var localeData = MessageFormat.__localeData__;\n  var data = localeData[locale.toLowerCase()];\n\n  // The locale data is de-duplicated, so we have to traverse the locale's\n  // hierarchy until we find a `pluralRuleFunction` to return.\n  while (data) {\n    if (data.pluralRuleFunction) {\n      return data.pluralRuleFunction;\n    }\n    data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n  }\n  throw new Error('Locale data added to IntlMessageFormat is missing a ' + '`pluralRuleFunction` for :' + locale);\n};\nMessageFormat.prototype._format = function (pattern, values) {\n  var result = '',\n    i,\n    len,\n    part,\n    id,\n    value,\n    err;\n  for (i = 0, len = pattern.length; i < len; i += 1) {\n    part = pattern[i];\n\n    // Exist early for string parts.\n    if (typeof part === 'string') {\n      result += part;\n      continue;\n    }\n    id = part.id;\n\n    // Enforce that all required values are provided by the caller.\n    if (!(values && src$utils$$.hop.call(values, id))) {\n      err = new Error('A value must be provided for: ' + id);\n      err.variableId = id;\n      throw err;\n    }\n    value = values[id];\n\n    // Recursively format plural and select parts' option â€” which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n    if (part.options) {\n      result += this._format(part.getOption(value), values);\n    } else {\n      result += part.format(value);\n    }\n  }\n  return result;\n};\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\n  var mergedFormats = {},\n    type,\n    mergedType;\n  for (type in defaults) {\n    if (!src$utils$$.hop.call(defaults, type)) {\n      continue;\n    }\n    mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);\n    if (formats && src$utils$$.hop.call(formats, type)) {\n      src$utils$$.extend(mergedType, formats[type]);\n    }\n  }\n  return mergedFormats;\n};\nMessageFormat.prototype._resolveLocale = function (locales) {\n  if (typeof locales === 'string') {\n    locales = [locales];\n  }\n\n  // Create a copy of the array so we can push on the default locale.\n  locales = (locales || []).concat(MessageFormat.defaultLocale);\n  var localeData = MessageFormat.__localeData__;\n  var i, len, localeParts, data;\n\n  // Using the set of locales + the default locale, we look for the first one\n  // which that has been registered. When data does not exist for a locale, we\n  // traverse its ancestors to find something that's been registered within\n  // its hierarchy of locales. Since we lack the proper `parentLocale` data\n  // here, we must take a naive approach to traversal.\n  for (i = 0, len = locales.length; i < len; i += 1) {\n    localeParts = locales[i].toLowerCase().split('-');\n    while (localeParts.length) {\n      data = localeData[localeParts.join('-')];\n      if (data) {\n        // Return the normalized locale string; e.g., we return \"en-US\",\n        // instead of \"en-us\".\n        return data.locale;\n      }\n      localeParts.pop();\n    }\n  }\n  var defaultLocale = locales.pop();\n  throw new Error('No locale data has been added to IntlMessageFormat for: ' + locales.join(', ') + ', or the default locale: ' + defaultLocale);\n};","map":{"version":3,"names":["MessageFormat","message","locales","formats","ast","__parse","type","TypeError","_mergeFormats","value","_resolveLocale","pluralFn","_findPluralRuleFunction","_locale","pattern","_compilePattern","messageFormat","format","values","_format","e","variableId","Error","enumerable","number","style","date","month","day","year","weekday","time","hour","minute","second","timeZoneName","src$es5$$","objCreate","data","locale","__localeData__","toLowerCase","intl$messageformat$parser$$","parse","writable","undefined","prototype","resolvedOptions","compiler","src$compiler$$","compile","localeData","pluralRuleFunction","parentLocale","result","i","len","part","id","err","length","src$utils$$","hop","call","options","getOption","defaults","mergedFormats","mergedType","concat","defaultLocale","localeParts","split","join","pop"],"sources":["\\src\\core.js"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\nimport {extend, hop} from './utils';\nimport {defineProperty, objCreate} from './es5';\nimport Compiler from './compiler';\nimport parser from 'intl-messageformat-parser';\n\nexport default MessageFormat;\n\n// -- MessageFormat --------------------------------------------------------\n\nfunction MessageFormat(message, locales, formats) {\n    // Parse string messages into an AST.\n    var ast = typeof message === 'string' ?\n            MessageFormat.__parse(message) : message;\n\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new TypeError('A message must be provided as a String or AST.');\n    }\n\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    formats = this._mergeFormats(MessageFormat.formats, formats);\n\n    // Defined first because it's used to build the format pattern.\n    defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});\n\n    // Compile the `ast` to a pattern that is highly optimized for repeated\n    // `format()` invocations. **Note:** This passes the `locales` set provided\n    // to the constructor instead of just the resolved locale.\n    var pluralFn = this._findPluralRuleFunction(this._locale);\n    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);\n\n    // \"Bind\" `format()` method to `this` so it can be passed by reference like\n    // the other `Intl` APIs.\n    var messageFormat = this;\n    this.format = function (values) {\n      try {\n        return messageFormat._format(pattern, values);\n      } catch (e) {\n        if (e.variableId) {\n          throw new Error(\n            'The intl string context variable \\'' + e.variableId + '\\'' +\n            ' was not provided to the string \\'' + message + '\\''\n          );\n        } else {\n          throw e;\n        }\n      }\n    };\n}\n\n// Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\ndefineProperty(MessageFormat, 'formats', {\n    enumerable: true,\n\n    value: {\n        number: {\n            'currency': {\n                style: 'currency'\n            },\n\n            'percent': {\n                style: 'percent'\n            }\n        },\n\n        date: {\n            'short': {\n                month: 'numeric',\n                day  : 'numeric',\n                year : '2-digit'\n            },\n\n            'medium': {\n                month: 'short',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'long': {\n                month: 'long',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'full': {\n                weekday: 'long',\n                month  : 'long',\n                day    : 'numeric',\n                year   : 'numeric'\n            }\n        },\n\n        time: {\n            'short': {\n                hour  : 'numeric',\n                minute: 'numeric'\n            },\n\n            'medium':  {\n                hour  : 'numeric',\n                minute: 'numeric',\n                second: 'numeric'\n            },\n\n            'long': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            },\n\n            'full': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            }\n        }\n    }\n});\n\n// Define internal private properties for dealing with locale data.\ndefineProperty(MessageFormat, '__localeData__', {value: objCreate(null)});\ndefineProperty(MessageFormat, '__addLocaleData', {value: function (data) {\n    if (!(data && data.locale)) {\n        throw new Error(\n            'Locale data provided to IntlMessageFormat is missing a ' +\n            '`locale` property'\n        );\n    }\n\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n}});\n\n// Defines `__parse()` static method as an exposed private.\ndefineProperty(MessageFormat, '__parse', {value: parser.parse});\n\n// Define public `defaultLocale` property which defaults to English, but can be\n// set by the developer.\ndefineProperty(MessageFormat, 'defaultLocale', {\n    enumerable: true,\n    writable  : true,\n    value     : undefined\n});\n\nMessageFormat.prototype.resolvedOptions = function () {\n    // TODO: Provide anything else?\n    return {\n        locale: this._locale\n    };\n};\n\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\n    var compiler = new Compiler(locales, formats, pluralFn);\n    return compiler.compile(ast);\n};\n\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\n    var localeData = MessageFormat.__localeData__;\n    var data       = localeData[locale.toLowerCase()];\n\n    // The locale data is de-duplicated, so we have to traverse the locale's\n    // hierarchy until we find a `pluralRuleFunction` to return.\n    while (data) {\n        if (data.pluralRuleFunction) {\n            return data.pluralRuleFunction;\n        }\n\n        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n    }\n\n    throw new Error(\n        'Locale data added to IntlMessageFormat is missing a ' +\n        '`pluralRuleFunction` for :' + locale\n    );\n};\n\nMessageFormat.prototype._format = function (pattern, values) {\n    var result = '',\n        i, len, part, id, value, err;\n\n    for (i = 0, len = pattern.length; i < len; i += 1) {\n        part = pattern[i];\n\n        // Exist early for string parts.\n        if (typeof part === 'string') {\n            result += part;\n            continue;\n        }\n\n        id = part.id;\n\n        // Enforce that all required values are provided by the caller.\n        if (!(values && hop.call(values, id))) {\n          err = new Error('A value must be provided for: ' + id);\n          err.variableId = id;\n          throw err;\n        }\n\n        value = values[id];\n\n        // Recursively format plural and select parts' option â€” which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (part.options) {\n            result += this._format(part.getOption(value), values);\n        } else {\n            result += part.format(value);\n        }\n    }\n\n    return result;\n};\n\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\n    var mergedFormats = {},\n        type, mergedType;\n\n    for (type in defaults) {\n        if (!hop.call(defaults, type)) { continue; }\n\n        mergedFormats[type] = mergedType = objCreate(defaults[type]);\n\n        if (formats && hop.call(formats, type)) {\n            extend(mergedType, formats[type]);\n        }\n    }\n\n    return mergedFormats;\n};\n\nMessageFormat.prototype._resolveLocale = function (locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n\n    // Create a copy of the array so we can push on the default locale.\n    locales = (locales || []).concat(MessageFormat.defaultLocale);\n\n    var localeData = MessageFormat.__localeData__;\n    var i, len, localeParts, data;\n\n    // Using the set of locales + the default locale, we look for the first one\n    // which that has been registered. When data does not exist for a locale, we\n    // traverse its ancestors to find something that's been registered within\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\n    // here, we must take a naive approach to traversal.\n    for (i = 0, len = locales.length; i < len; i += 1) {\n        localeParts = locales[i].toLowerCase().split('-');\n\n        while (localeParts.length) {\n            data = localeData[localeParts.join('-')];\n            if (data) {\n                // Return the normalized locale string; e.g., we return \"en-US\",\n                // instead of \"en-us\".\n                return data.locale;\n            }\n\n            localeParts.pop();\n        }\n    }\n\n    var defaultLocale = locales.pop();\n    throw new Error(\n        'No locale data has been added to IntlMessageFormat for: ' +\n        locales.join(', ') + ', or the default locale: ' + defaultLocale\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}